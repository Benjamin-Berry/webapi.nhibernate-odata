using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

namespace Pathoschild.WebApi.NhibernateOdata.Internal
{
	/// <summary>
	/// Intercepts queries before they're parsed by NHibernate to rewrite unsupported Lambdas for string.Contains, .StartsWith and .EndsWith.
	/// </summary>
	public class FixStringMethodsVisitor : ExpressionVisitor
	{
		/// <summary>Whether the visitor is visiting a nested node.</summary>
		/// <remarks>This is used to recognize the top-level node for logging.</remarks>
		private bool _isRecursing;

		private readonly List<MethodInfo> _stringMethods = new List<MethodInfo>();

		public FixStringMethodsVisitor()
		{
			this._stringMethods.AddRange(typeof(string).GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(x => x.Name == "Contains" || x.Name == "StartsWith" || x.Name == "EndsWith"));
		}

		/// <summary>Dispatches the expression to one of the more specialized visit methods in this class.</summary>
		/// <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
		/// <param name="node">The expression to visit.</param>
		public override Expression Visit(Expression node)
		{
			// top node
			if (!this._isRecursing)
			{
				this._isRecursing = true;
				return base.Visit(node);
			}

			var expression = node as LambdaExpression;
			if (expression != null)
			{
				var result = this.IsODataContainsLambda(expression);

				return Expression.Lambda(result, expression.Parameters);
			}

			return base.Visit(node);
		}

		private Expression IsODataContainsLambda(LambdaExpression expression)
		{
			var one = expression.Body as BinaryExpression;
			if (one != null)
			{
				var two = one.Left as BinaryExpression;
				if (two != null)
				{
					var three = two.Left as ConditionalExpression;
					if (three != null)
					{
						var four = three.IfFalse as UnaryExpression;
						if (four != null)
						{
							var five = four.Operand as MethodCallExpression;
							if (five != null)
							{
								if (this._stringMethods.Contains(five.Method))
								{
									var callMethod = Expression.Call(
										five.Object,
										five.Method,
										five.Arguments);

									// Convert the result to a nullable boolean so the Expression.Equal works.
									var callMethod2 = Expression.Convert(callMethod, typeof(bool?));

									return Expression.Equal(callMethod2, two.Right);
								}
							}
						}
					}
				}
			}

			return expression;
		}

		// The following expression tree is generated by the ODataQueryOptions.ApplyTo method. We 
		//.Lambda #Lambda1<System.Func`2[WebApi.NHibernate_OData.Tests.Models.Parent,System.Boolean]>(WebApi.NHibernate_OData.Tests.Models.Parent $$it)
		// {
		//     (.If (
		//         $$it.Name == null | .Constant<System.Web.Http.OData.Query.Expressions.LinqParameterContainer+TypedLinqParameterContainer`1[System.String]>(System.Web.Http.OData.Query.Expressions.LinqParameterContainer+TypedLinqParameterContainer`1[System.String]).TypedProperty ==
		//         null
		//     ) {
		//         null
		//     } .Else {
		//         (System.Nullable`1[System.Boolean]).Call ($$it.Name).Contains(.Constant<System.Web.Http.OData.Query.Expressions.LinqParameterContainer+TypedLinqParameterContainer`1[System.String]>(System.Web.Http.OData.Query.Expressions.LinqParameterContainer+TypedLinqParameterContainer`1[System.String]).TypedProperty)
		//     } == (System.Nullable`1[System.Boolean]).Constant<System.Web.Http.OData.Query.Expressions.LinqParameterContainer+TypedLinqParameterContainer`1[System.Boolean]>(System.Web.Http.OData.Query.Expressions.LinqParameterContainer+TypedLinqParameterContainer`1[System.Boolean]).TypedProperty)
		//     == .Constant<System.Nullable`1[System.Boolean]>(True)
		// }
	}
}
